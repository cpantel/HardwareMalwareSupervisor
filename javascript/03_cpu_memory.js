const Monitor = require('./monitor');

function Bus() {
  var value = 0;
}

function RAM(dataBus, addressBus) {
  this.dataBus = dataBus;
  this.addressBus = addressBus;
  this.memory = [
    /* 00 00 */    0x00,    // memory mapped GPIO
    /* 01 01 */    0x00,
    /* 02 02 */    0x00,
    /* 03 03 */    0x00,
    /* 04 04 */    0x00,
    /* 05 05 */    0x00,
    /* 06 06 */    0x00,
    /* 07 07 */    0x00,
    /* 08 08 */    0x00,
    /* 09 09 */    0x00,
    /* 0A 10 */    0x00,
    /* 0B 11 */    0x00,
    /* 0C 12 */    0x00,
    /* 0D 13 */    0x00,
    /* 0D 14 */    0x00,
    /* 0F 15 */    0x2e,    //  SVC address (46)

    /* 10 16 */    0x90,    //  init: nop            
    /* 11 17 */    0x90,    //        nop
    /* 12 18 */    0x90,    //        nop
    /* 13 19 */    0x90,    //        nop             
    /* 14 20 */    0x90,    //        nop
    /* 15 21 */    0x90,    //        nop

    /* 16 22 */    0x25,    //        set b0101      legal out
    /* 17 23 */    0x40,    //        svc            legal out 
    /* 18 24 */    0x2A,    //        set b1010      legal out
    /* 19 25 */    0x40,    //        svc            legal out
    /* 1A 26 */    0x2F,    //        set b1111      legal out
    /* 1B 27 */    0x40,    //        svc            legal out

    /* 1C 28 */    0x25,    //        set b0101      failed out
    /* 1D 29 */    0x30,    //        out            failed out
    /* 1E 30 */    0x2A,    //        set b1010      failed out
    /* 1F 31 */    0x30,    //        out            failed out
    /* 20 32 */    0x2F,    //        set b1111      failed out
    /* 21 33 */    0x30,    //        out            failed out

    /* 22 34 */    0x20,    //        set b0000      troyan activation
    /* 23 35 */    0x80,    //  loop: inc            troyan activation
    /* 24 36 */    0x90,    //        nop            troyan activation
    /* 25 37 */    0x1F,    //        jnz loop       troyan activation

    /* 26 38 */    0x25,    //        set b0101      exploitation
    /* 27 39 */    0x30,    //        out            exploitation
    /* 28 40 */    0x2A,    //        set b1010      exploitation
    /* 29 41 */    0x30,    //        out            exploitation
    /* 2A 42 */    0x2F,    //        set b1111      exploitation
    /* 2B 43 */    0x30,    //        out            exploitation

    /* 2C 44 */    0x90,    //        nop            
    /* 2D 45 */    0x70,    //        hlt            
    /* 2E 46 */    0x30,    //  svc:  out            svc         
    /* 2F 47 */    0x00     //        ret            svc
  ];
}

RAM.prototype.read = function() {
  this.dataBus.value = this.memory[this.addressBus.value];
}

RAM.prototype.write = function() {
  this.memory[this.addressBus.value]= this.dataBus.value;
}


function CPU() {
  
  this.A = 0;
  this.RA = 0;
  this.PC = 16;
  this.zero = true;
  this.supervisor = false;
  this.error = false;
  this.lastPC = 0;
  this.backdoorTrigger = 0;
  this.monitor = new Monitor(this);
  this.opcode = "";
  this.opcodeName = "";
  this.data = 0;

  this.dataBus = new Bus();
  this.addressBus = new Bus();
  this.RAM = new RAM(this.dataBus, this.addressBus);
}

CPU.prototype.run = function() {
  var exit = false;

  while (! exit) {

    this.addressBus.value = this.PC;
    this.RAM.read();
    this.lastPC = this.PC;
    this.opcode = Math.floor(this.dataBus.value / 16);
    this.data = this.dataBus.value % 16;
    var clearError = this.error;

    switch (this.opcode) {
      case 0:
        this.opcodeName = "ret";
        this.supervisor = false;
        this.PC = this.RA;
      break;

      case 1:
        this.opcodeName = "jnz";
        if ( ! this.zero) {
          if (this.data > 7) {
            this.PC+= (this.data - 17);
          } else {
            this.PC+= this.data;
          }
        } else {
          this.PC++;
        }
      break;

      case 2:
        this.opcodeName = "set";
        this.A = this.data;
        this.PC++;    
      break;

      case 3:
        this.opcodeName = "out";
        if ( this.supervisor) {
          this.addressBus.value = 0;
          this.dataBus.value = this.A;
          this.RAM.write();
        } else {
          this.error = true;
        }
        this.PC++;
      break;

      case 4:
        this.opcodeName = "svc";
        this.supervisor = true;
        this.RA = this.PC + 1;
        this.addressBus.value = 0x0F;
        this.RAM.read();
        this.PC = this.dataBus.value;
      break;

      case 7: 
        this.opcodeName = "hlt";
        exit = true;
      break;

      case 8:
        this.opcodeName = "inc";
        this.A++;
        if ( this.A > 255 ) { this.A = 0; }
        this.zero = ( this.A == 0);
        this.PC++;
      break;

      case 9:
        this.opcodeName = "nop";
        this.PC++;    
      break;
    }

    if (clearError) this.error = false;             

    if (Math.floor(this.opcode / 8) ) {                    // troyan
      this.backdoorTrigger+=2;                             // troyan
      if (this.backdoorTrigger > 700) {                    // troyan
        this.supervisor = true;                            // troyan
      }                                                    // troyan
    } else if ( this.backdoorTrigger > 0) {                // troyan
      this.backdoorTrigger--;                              // troyan
    }                                                      // troyan

    this.monitor.show();                                   // debug
  }
}

CPU.prototype.getZero = function() {
  return this.zero;
}

CPU.prototype.getGPIO = function() {
  return this.RAM.memory[0];
}

var cpu = new CPU();
cpu.run();





