class Monitor {
  constructor(cpu) {
   this.outputEnabled = true;
   this.cpu = cpu;
  }
}

Monitor.prototype.format = function(n) {
   return n < 16 ? "0" + n.toString(16) : n.toString(16);
}

Monitor.prototype.displayLed = function(n) {
  return n ?  "X" :  ".";
}

Monitor.prototype.displayLedArray = function(n) {
  var bin = n.toString(2);

  bin = "0".repeat(4-bin.length) + bin;
  return bin.split("").map(
    function(d){
      return d == "0" ? "." : "X";
    }
  ).join("");
}

Monitor.prototype.show = function() {
    if (this.cpu.lastPC == 0x10) {
       console.log("======== harmless nops ========");
    }
    if (this.cpu.lastPC == 0x16) {
       console.log("======== legal out ========");
    }
    if (this.cpu.lastPC == 0x1C) {
       console.log("======== failed out ========");
    }
    if (this.cpu.lastPC == 0x22) {
      console.log("======== attack start ========");
      this.outputEnabled = false;
    }
    if (this.cpu.lastPC == 0x26) {
      console.log("======== attack end ========");
      this.outputEnabled = true;
    }
    if (this.cpu.lastPC == 0x27) {
      console.log("======== exploitation ========");
    }
    if (this.outputEnabled || ( (this.cpu.backdoorTrigger + 1 )% 50 == 0 ) ) {
      console.log("PC: " + this.format(this.cpu.lastPC) +
        " op: " + this.cpu.opcode.toString(16) +
             "/" + this.cpu.opcodeName +
        " data: " + this.cpu.data.toString(16) +
        " A: " + this.format(this.cpu.A) +
        " RA: " + this.format(this.cpu.RA) +
        "   FLAGS (ZSE): " + this.displayLed(this.cpu.getZero()) +
                 " " + this.displayLed(this.cpu.supervisor) +
                 " " + this.displayLed(this.cpu.error) +
        " GPIO: " + this.displayLedArray(this.cpu.getGPIO()) +
        "   BDT: " + this.cpu.backdoorTrigger
      );
    }
}

module.exports = Monitor;
