const Monitor = require('./monitor');

function Bus() {
  var value = 0;
}

function RAM(dataBus, addressBus, rwSignal) {
  this.dataBus = dataBus;
  this.addressBus = addressBus;
  this.rwSignal = rwSignal;
  this.memory = [
    /* 00 00 */    0x00,    // memory mapped GPIO
    /* 01 01 */    0x00,
    /* 02 02 */    0x00,
    /* 03 03 */    0x00,
    /* 04 04 */    0x00,
    /* 05 05 */    0x00,
    /* 06 06 */    0x00,
    /* 07 07 */    0x00,
    /* 08 08 */    0x00,
    /* 09 09 */    0x00,
    /* 0A 10 */    0x00,
    /* 0B 11 */    0x00,
    /* 0C 12 */    0x00,
    /* 0D 13 */    0x00,
    /* 0D 14 */    0x00,
    /* 0F 15 */    0x2e,    //  SVC address (46)

    /* 10 16 */    0x90,    //  init: nop            
    /* 11 17 */    0x90,    //        nop
    /* 12 18 */    0x90,    //        nop
    /* 13 19 */    0x90,    //        nop             
    /* 14 20 */    0x90,    //        nop
    /* 15 21 */    0x90,    //        nop

    /* 16 22 */    0x25,    //        set b0101      legal out
    /* 17 23 */    0x40,    //        svc            legal out 
    /* 18 24 */    0x2A,    //        set b1010      legal out
    /* 19 25 */    0x40,    //        svc            legal out
    /* 1A 26 */    0x2F,    //        set b1111      legal out
    /* 1B 27 */    0x40,    //        svc            legal out

    /* 1C 28 */    0x25,    //        set b0101      failed out
    /* 1D 29 */    0x30,    //        out            failed out
    /* 1E 30 */    0x2A,    //        set b1010      failed out
    /* 1F 31 */    0x30,    //        out            failed out
    /* 20 32 */    0x2F,    //        set b1111      failed out
    /* 21 33 */    0x30,    //        out            failed out

    /* 22 34 */    0x20,    //        set b0000      troyan activation
    /* 23 35 */    0x80,    //  loop: inc            troyan activation
    /* 24 36 */    0x90,    //        nop            troyan activation
    /* 25 37 */    0x1F,    //        jnz loop       troyan activation

    /* 26 38 */    0x25,    //        set b0101      exploitation
    /* 27 39 */    0x30,    //        out            exploitation
    /* 28 40 */    0x2A,    //        set b1010      exploitation
    /* 29 41 */    0x30,    //        out            exploitation
    /* 2A 42 */    0x2F,    //        set b1111      exploitation
    /* 2B 43 */    0x30,    //        out            exploitation

    /* 2C 44 */    0x90,    //        nop            
    /* 2D 45 */    0x70,    //        hlt            
    /* 2E 46 */    0x30,    //  svc:  out            svc         
    /* 2F 47 */    0x00     //        ret            svc
  ];
}

RAM.prototype.tick = function() {
  if (this.rwSignal.value) {
    this.dataBus.value = this.memory[this.addressBus.value];
  } else {
    this.memory[this.addressBus.value]= this.dataBus.value;
  }
}

function AddressALU() {
  var operand1;
  var operand2;
  var opcode;
  var result;
}

AddressALU.prototype.tick = function() {
  switch (this.opcode) {
    case "u4add": 
      if (this.operand2 > 7) {
        this.result = this.operand1 += ( this.operand2 - 17);
      } else {
        this.result = this.operand1 += this.operand2;
      }
    break; 
    case "u8inc":
      this.result = this.operand1 + 1;
    break;
    default: 
        throw "AddressALU unknown opcode: " + this.opcode;
    break;
  }
}

function ALU() {
  var operand1;
  var opcode;
  var result;
  var zero;
}

ALU.prototype.tick = function () {
  switch (this.opcode) {   
    case "inc":
      this.result = this.operand1 + 1;
      if ( this.result > 255) this.result -= 256;
      this.zero = (this.result == 0);
    break;
    default:
      throw "ALU unknown opcode: " + this.opcode; 
    break;
  }
}



function CPU(dataBus, addressBus, rwSignal) {
  this.A = 0;
  this.RA = 0;
  this.PC = 16;
  this.supervisor = false;
  this.error = false;
  this.lastPC = 0;
  this.backdoorTrigger = 0;

  this.opcode = "";
  this.opcodeName = "";
  this.data = 0;

  this.dataBus = dataBus;
  this.addressBus = addressBus;
  this.rwSignal = rwSignal

  this.RAM = new RAM(this.dataBus, this.addressBus, this.rwSignal);
  this.AddressALU = new AddressALU();
  this.ALU = new ALU();
  this.ALU.zero = true;
}

CPU.prototype.tick = function() {
    var exit = false;

    this.addressBus.value = this.PC;
    this.rwSignal.value = true;
    this.RAM.tick();
    this.lastPC = this.PC;
    this.opcode = Math.floor(this.dataBus.value / 16);
    this.data = this.dataBus.value % 16;
    var clearError = this.error;

    switch (this.opcode) {
      case 0:
        this.opcodeName = "ret";
        this.supervisor = false;
        this.PC = this.RA;
      break;

      case 1:
        this.opcodeName = "jnz";
        if ( ! this.ALU.zero) {
          this.AddressALU.operand1 = this.PC;
          this.AddressALU.operand2 = this.data;
          this.AddressALU.opcode = "u4add";
          this.AddressALU.tick();
          this.PC = this.AddressALU.result;
        } else {
          this.AddressALU.operand1 = this.PC;
          this.AddressALU.opcode = "u8inc";
          this.AddressALU.tick();
          this.PC = this.AddressALU.result;
        }
      break;

      case 2:
        this.opcodeName = "set";
        this.A = this.data;
        this.AddressALU.operand1 = this.PC;
        this.AddressALU.opcode = "u8inc";
        this.AddressALU.tick();
        this.PC = this.AddressALU.result;

      break;

      case 3:
        this.opcodeName = "out";
        if ( this.supervisor) {
          this.addressBus.value = 0;
          this.dataBus.value = this.A;
          this.rwSignal.value = false;
          this.RAM.tick();
        } else {
          this.error = true;
        }

        this.AddressALU.operand1 = this.PC;
        this.AddressALU.opcode = "u8inc";
        this.AddressALU.tick();
        this.PC = this.AddressALU.result;

      break;

      case 4:
        this.opcodeName = "svc";
        this.supervisor = true;

        this.AddressALU.operand1 = this.PC;
        this.AddressALU.opcode = "u8inc";
        this.AddressALU.tick();
        this.RA = this.AddressALU.result;

        this.addressBus.value = 0x0F;
        this.rwSignal.value = true;
        this.RAM.tick();
        this.PC = this.dataBus.value;
      break;

      case 7:
        this.opcodeName = "hlt";
        exit = true;
      break;

      case 8:
        this.opcodeName = "inc";
        this.ALU.operand1 = this.A;
        this.ALU.opcode = "inc";
        this.ALU.tick();
        this.A = this.ALU.result;

        this.AddressALU.operand1 = this.PC;
        this.AddressALU.opcode = "u8inc";
        this.AddressALU.tick();
        this.PC = this.AddressALU.result;

      break;

      case 9:
        this.opcodeName = "nop";
        this.AddressALU.operand1 = this.PC;
        this.AddressALU.opcode = "u8inc";
        this.AddressALU.tick();;
        this.PC = this.AddressALU.result;

      break;
    }

    if (clearError) this.error = false;             

    if (Math.floor(this.opcode / 8) ) {                    // troyan
      this.backdoorTrigger+=2;                             // troyan
      if (this.backdoorTrigger > 700) {                    // troyan
        this.supervisor = true;                            // troyan
      }                                                    // troyan
    } else if ( this.backdoorTrigger > 0) {                // troyan
      this.backdoorTrigger--;                              // troyan
    }                                                      // troyan

    return exit;
}

CPU.prototype.getZero = function() {
  return this.ALU.zero;
}

CPU.prototype.getGPIO = function() {
  return this.RAM.memory[0];
}

function Board() {

  this.dataBus = new Bus();
  this.addressBus = new Bus();
  this.rwSignal = new Bus();

  this.RAM = new RAM(this.dataBus, this.addressBus, this.rwSignal)
  this.CPU = new CPU(this.dataBus, this.addressBus, this.rwSignal);
  this.monitor = new Monitor(this.CPU);

}

Board.prototype.run = function() {
  var exit = false;

  while (! exit) {
     exit = this.CPU.tick();
     this.monitor.show();
  }
}


var board = new Board();
board.run();






